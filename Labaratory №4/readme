ОТЧЕТ ПО ЛАБОРАТОРНОЙ РАБОТЕ №4 ПО JAVA

 Вариант 4 

  ОБЩЕЕ ОПИСАНИЕ РАБОТЫ
Лабораторная работа №4 посвящена изучению обобщенного программирования (Generics) в Java, включая параметризацию типов, ограничения, wildcards, функциональные интерфейсы и методы высшего порядка. Все задачи реализованы в едином проекте с дружественным консольным интерфейсом, поддерживающим как ручной, так и автоматический ввод данных.

  ЗАДАНИЕ 1. ОБОБЩЕННЫЕ ТИПЫ
 # 1.1. ОБОБЩЕННАЯ КОРОБКА

 ОПИСАНИЕ КЛАССА Box<T>: 
Универсальный контейнер для хранения одного объекта любого типа с контролем состояния.

 ПОЛЯ КЛАССА: 
-  private T item  - хранимый объект типа T

 КОНСТРУКТОРЫ: 
-  Box()  - создает пустую коробку
-  Box(T item)  - создает коробку с указанным объектом

 МЕТОДЫ ДОСТУПА: 
-  T getItem()  - возвращает хранимый объект
-  void setItem(T item)  - устанавливает объект с проверкой заполненности

 МЕТОДЫ ЛОГИКИ: 
-  void putBox(T item)  - размещает объект в коробке
-  boolean isEmpty()  - проверяет, пуста ли коробка
-  T takeItem()  - извлекает объект с обнулением ссылки

 ИСКЛЮЧЕНИЯ: 
-  IllegalStateException  при попытке положить второй объект
-  IllegalStateException  при извлечении из пустой коробки

 ТЕСТИРОВАНИЕ: 
   java
Box<Integer> box = new Box<>();
box.putBox(3);
Integer value = box.takeItem();
// Результат: значение 3 успешно извлечено
   

 # 1.3. ПОИСК МАКСИМУМА

 ОПИСАНИЕ КЛАССА BoxUtils: 
Утилитарный класс для работы с коробками, содержащими числовые значения.

 МЕТОДЫ: 
-  double findMaxValue(List<? extends Box<? extends Number>> boxes)  - находит максимальное значение среди всех коробок

 ПАРАМЕТРЫ: 
-  boxes  - список коробок с числовыми значениями

 ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: 
- Максимальное значение в формате double

 ИСКЛЮЧЕНИЯ: 
-  IllegalArgumentException  для пустого списка или отсутствия значений

 ТЕСТИРОВАНИЕ: 
   java
List<Box<? extends Number>> boxes = Arrays.asList(
    new Box<>(10), new Box<>(3.14), new Box<>(-5L)
);
double max = BoxUtils.findMaxValue(boxes);
// Результат: 10.0
   

  ЗАДАНИЕ 2. СРАВНИМЫЕ ТИПЫ
 # 2.2. СРАВНИМОЕ

 ОПИСАНИЕ ИНТЕРФЕЙСА Comparable<T>: 
Функциональный интерфейс для сравнения объектов.

 МЕТОДЫ: 
-  int compare(T item)  - сравнивает текущий объект с переданным

 РЕАЛИЗАЦИЯ КЛАССА IntegerValue: 
Класс, реализующий сравнение целых чисел.

 ПОЛЯ КЛАССА: 
-  private Integer item  - хранимое целое число

 КОНСТРУКТОРЫ: 
-  IntegerValue()  - создает объект без значения
-  IntegerValue(Integer item)  - создает объект с указанным числом

 МЕТОД СРАВНЕНИЯ: 
-  int compare(Integer item)  - сравнивает числа и выводит результат

 ТЕСТИРОВАНИЕ: 
   java
IntegerValue val1 = new IntegerValue(5);
val1.compare(3); 
// Результат: 1 - Вводимый обьект меньше
   

  ЗАДАНИЕ 3. ФУНКЦИОНАЛЬНОЕ ПРОГРАММИРОВАНИЕ
 # 3.1. ФУНКЦИЯ

 ОПИСАНИЕ ИНТЕРФЕЙСА Functions<T,P>: 
Функциональный интерфейс для преобразования объектов.

 МЕТОДЫ: 
-  P apply(T item)  - применяет функцию к элементу

 РЕАЛИЗАЦИЯ В ListTransform: 
-  <T, P> List<P> transform(List<T> list, Functions<T, P> function)  - преобразует список

 ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ: 
1. Длины строк:  "qwerty" → 6 
2. Абсолютные значения:  -3 → 3 
3. Максимумы массивов:  [1,5,3] → 5 

 ТЕСТИРОВАНИЕ: 
   java
List<String> strings = Arrays.asList("qwerty", "asdfg", "zx");
List<Integer> lengths = ListTransform.transform(strings, s -> s.length());
// Результат: [6, 5, 2]
   

 # 3.2. ФИЛЬТР

 ОПИСАНИЕ ИНТЕРФЕЙСА Filter<T>: 
Функциональный интерфейс для фильтрации объектов.

 МЕТОДЫ: 
-  boolean test(T item)  - проверяет условие для элемента

 РЕАЛИЗАЦИЯ В ListTransform: 
-  <T> List<T> test(List<T> list, Filter<T> function)  - фильтрует список

 ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ: 
1. Строки длиной ≥ 3 символов
2. Положительные числа
3. Массивы без положительных элементов

 ТЕСТИРОВАНИЕ: 
   java
List<Integer> numbers = Arrays.asList(1, -3, 7);
List<Integer> positive = ListTransform.test(numbers, n -> n > 0);
// Результат: [1, 7]
   

 # 3.3. СОКРАЩЕНИЕ

 ОПИСАНИЕ ИНТЕРФЕЙСА Reduction<T>: 
Функциональный интерфейс для свертки списка.

 МЕТОДЫ: 
-  T reduce(T accumulator, T current)  - объединяет два элемента

 РЕАЛИЗАЦИЯ В ListTransform: 
-  <T> T reduce(List<T> list, Reduction<T> reducer)  - сокращает список до одного значения

 ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ: 
1. Конкатенация строк:  ["a","b","c"] → "abc" 
2. Сумма чисел:  [1,-3,7] → 5 
3. Общее количество элементов в списках списков

 ТЕСТИРОВАНИЕ: 
   java
List<String> strings = Arrays.asList("qwerty", "asdfg", "zx");
String result = ListTransform.reduce(strings, (a,b) -> a + b);
// Результат: "qwertyasdfgzx"
   

 # 3.4. КОЛЛЕКЦИОНИРОВАНИЕ

 РЕАЛИЗАЦИЯ В ListTransform: 
-  <T, P extends Collection<T>> P collect(...)  - создает коллекцию из списка
-  <T, K, P extends Collection<T>, M extends Map<K, P>> M groupBy(...)  - группирует элементы

 ПАРАМЕТРЫ МЕТОДОВ: 
-  Supplier<P> collectionFactory  - фабрика для создания коллекции
-  BiConsumer<P, T> accumulator  - способ добавления элементов
-  Function<T, K> classifier  - функция классификации для группировки

 ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ: 
1. Разделение чисел на положительные и отрицательные
2. Группировка строк по длине
3. Уникальные строки (Set)

 ТЕСТИРОВАНИЕ: 
   java
List<Integer> numbers = Arrays.asList(1, -3, 7, -2);
Map<Boolean, List<Integer>> partitioned = ListTransform.groupBy(
    numbers, HashMap::new, ArrayList::new, n -> n > 0
);
// Результат: {true=[1,7], false=[-3,-2]}
   

  СТРУКТУРА ПАКЕТОВ

 ru.safoev.box: 
-  Box<T>  - обобщенная коробка
-  BoxUtils  - утилиты для работы с коробками

 ru.safoev.compare: 
-  Comparable<T>  - интерфейс сравнения
-  IntegerValue  - реализация для целых чисел

 ru.safoev.function: 
-  Functions<T,P>  - интерфейс функции
-  Filter<T>  - интерфейс фильтра
-  Reduction<T>  - интерфейс сокращения
-  ListTransform  - утилиты для работы со списками

 ru.safoev.menu: 
-  MenuAndValidator  - система меню и валидации

 ru.safoev.main: 
-  Main  - точка входа в программу

  СИСТЕМА МЕНЮ И ТЕСТИРОВАНИЯ

 КЛАСС MenuAndValidator: 
Обеспечивает полное тестирование всех реализованных функциональностей через интерактивное консольное меню.

 ВОЗМОЖНОСТИ: 
- Ручной ввод с валидацией данных
- Автоматический ввод с готовыми тестовыми наборами
- Пошаговое тестирование каждой задачи
- Обработка исключений и ошибок ввода

 РЕЖИМЫ РАБОТЫ: 
1.  Ручной ввод  - пользователь самостоятельно вводит данные для тестирования
2.  Автоматический ввод  - используются заранее подготовленные тестовые данные

 ОСОБЕННОСТИ РЕАЛИЗАЦИИ: 
- Полная валидация числового ввода
- Защита от некорректных данных
- Наглядное представление результатов
- Поддержка всех типов данных (Integer, Double, String, массивы)

  ПРИНЦИПЫ GENERICS В РЕАЛИЗАЦИИ

 TYPE ERASURE (СТИРАНИЕ ТИПОВ): 
Все generic-типы заменяются на Object после компиляции, что обеспечивает обратную совместимость.

 WILDCARDS (МАСКИ ТИПОВ): 
-  ? extends Number  - для чтения числовых значений
-  ? super Integer  - для записи целых чисел

 ФУНКЦИОНАЛЬНЫЕ ИНТЕРФЕЙСЫ: 
-  Functions<T,P>  - преобразование типов
-  Filter<T>  - фильтрация элементов
-  Reduction<T>  - свертка коллекций

  ЗАКЛЮЧЕНИЕ

Все задачи варианта 4 успешно реализованы и протестированы:

1.  Задание 1.1  - Обобщенная коробка с контролем состояния
2.  Задание 1.3  - Поиск максимума в коробках с числами
3.  Задание 2.2  - Сравнимые объекты с универсальным интерфейсом
4.  Задание 3.1  - Функциональное преобразование списков
5.  Задание 3.2  - Фильтрация элементов по условию
6.  Задание 3.3  - Сокращение списков до одного значения
7.  Задание 3.4  - Коллекционирование и группировка данных

Программа демонстрирует практическое применение обобщенного программирования, функциональных интерфейсов и методов высшего порядка в Java, обеспечивая типобезопасность и гибкость использования.
