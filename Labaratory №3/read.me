ОТЧЕТ ПО ЛАБОРАТОРНОЙ РАБОТЕ №3 ПО JAVA

Вариант 4

ОБЩЕЕ ОПИСАНИЕ РАБОТЫ
Лабораторная работа №3 посвящена углубленному изучению объектно-ориентированного программирования в Java, включая инкапсуляцию, наследование, полиморфизм, работу с пакетами и переопределение методов. 
Все задачи реализованы в едином проекте с дружественным консольным интерфейсом.

ЗАДАНИЕ 1. ИНКАПСУЛЯЦИЯ 
1.5. ПЕРЕЗАРЯДКА ПИСТОЛЕТА

ОПИСАНИЕ КЛАССА Gun:
Класс представляет усовершенствованную версию пистолета с полным контролем над патронами и их состоянием.

ПОЛЯ КЛАССА:
private final int maxOfCartridges - максимальная вместимость обоймы
Наследует protected поле ammo от класса Weapon

КОНСТРУКТОРЫ:
Gun()
Описание: Создает пистолет с 5 патронами и вместимостью 5
Параметры: нет

Gun(int numberOfCartridges)
Описание: Создает пистолет с указанным количеством патронов
Параметры: numberOfCartridges - начальное количество патронов

Gun(int numberOfCartridges, int maxOfCartridges)
Описание: Создает пистолет с указанным количеством патронов и вместимостью
Параметры: numberOfCartridges - начальное количество, maxOfCartridges - максимальная вместимость

МЕТОДЫ ДОСТУПА:
int getNumberOfCartridges()
Описание: Возвращает текущее количество патронов
Параметры: нет

int getMaxOfCartridges()
Описание: Возвращает максимальную вместимость пистолета
Параметры: нет

boolean isCharged()
Описание: Проверяет, заряжен ли пистолет
Параметры: нет

МЕТОДЫ ЛОГИКИ:
int reload(int numberOfCartridges)
Описание: Перезаряжает пистолет с контролем переполнения
Параметры: numberOfCartridges - количество добавляемых патронов
Возвращает: количество лишних патронов
Исключения: IllegalArgumentException при отрицательном количестве

int unLoad()
Описание: Полностью разряжает пистолет
Параметры: нет
Возвращает: количество извлеченных патронов

void chargedOrNotCharged()
Описание: Выводит состояние заряженности пистолета
Параметры: нет

ТЕСТИРОВАНИЕ:
// Автоматический тест
Gun gun = new Gun(0, 7);
gun.reload(3);
for (int i = 0; i < 5; i++) gun.fire();
gun.reload(8);
for (int i = 0; i < 2; i++) gun.fire();
gun.unLoad();
gun.fire();
// Результат: Бах! Бах! Бах! Клац! Клац! Бах! Бах! Клац!

1.7. НЕПУСТЫЕ ИМЕНА

ОПИСАНИЕ КЛАССА Name:
Неизменяемый класс для работы с именами с гарантией наличия хотя бы одного непустого поля.

ПОЛЯ КЛАССА:
private final String lastname - фамилия
private final String firstname - имя
private final String surname - отчество

КОНСТРУКТОРЫ:
Name(String firstname)
Описание: Создает имя только с именем
Параметры: firstname - имя человека

Name(String lastname, String firstname)
Описание: Создает имя с фамилией и именем
Параметры: lastname - фамилия, firstname - имя

Name(String lastname, String firstname, String surname)
Описание: Создает полное имя
Параметры: lastname - фамилия, firstname - имя, surname - отчество

МЕТОДЫ ВАЛИДАЦИИ:
private void validateAtLeastOneField(String firstname, String lastname, String surname)
Описание: Гарантирует наличие хотя бы одного непустого поля
Исключения: IllegalArgumentException если все поля пустые

МЕТОДЫ ПРЕДСТАВЛЕНИЯ:
String toString()
Описание: Формат "Фамилия Имя Отчество"
Параметры: нет

String toString1()
Описание: Формат "Имя Отчество Фамилия"
Параметры: нет

ТЕСТИРОВАНИЕ:
// Корректные объекты
Name name1 = new Name("Иванов", "Иван", "Иванович");
Name name2 = new Name("Петров", "Петр");
Name name3 = new Name("Сидоров");

// Вывод: 
// Иванов Иван Иванович
// Петров Петр  
// Сидоров

ЗАДАНИЕ 2. РАЗРАБОТКА СТРУКТУР ДАННЫХ 
2.3. ТЕЛЕФОННЫЙ СПРАВОЧНИК
ОПИСАНИЕ КЛАССА TelephoneDirectory:
Класс представляет телефонный справочник с возможностью хранения пар "телефон-имя", поиска, добавления, удаления и различных операций с контактами.

ПОЛЯ КЛАССА:
private Map<String, String> telephoneName - отображение телефона на имя
private Map<String, String> nameTelephone - отображение имени на телефон

КОНСТРУКТОРЫ:
TelephoneDirectory()
Описание: Создает пустой телефонный справочник
Параметры: нет

МЕТОДЫ ДОБАВЛЕНИЯ:
String addNewUser(String telephone, String name)
Описание: Добавляет новую пару телефон-имя
Параметры: telephone - номер телефона, name - имя контакта
Возвращает: старый телефон если имя уже существовало

МЕТОДЫ УДАЛЕНИЯ:
void deleteUser(String name)
Описание: Удаляет контакт по имени
Параметры: name - имя удаляемого контакта

МЕТОДЫ ПОИСКА:
String getPhone(String name)
Описание: Возвращает телефон по имени
Параметры: name - имя контакта
Возвращает: номер телефона или null если не найден

void checkExists(String key)
Описание: Проверяет наличие телефона или имени в справочнике
Параметры: key - телефон или имя для проверки

МЕТОДЫ ПОЛУЧЕНИЯ ДАННЫХ:
void sizeMap()
Описание: Выводит количество контактов
Параметры: нет

String[][] pairsArray()
Описание: Возвращает все пары телефон-имя в виде массива
Параметры: нет

String[] telephoneArray()
Описание: Возвращает все телефоны в виде массива
Параметры: нет

String[] nameArray()
Описание: Возвращает все имена в виде массива
Параметры: нет

String[] namesArrayStartingWith(String prefix)
Описание: Возвращает имена, начинающиеся с указанного префикса
Параметры: prefix - начальная часть имени

МЕТОД ПРЕДСТАВЛЕНИЯ:
String toString()
Описание: Возвращает строковое представление всего справочника
Параметры: нет

ТЕСТИРОВАНИЕ:
TelephoneDirectory directory = new TelephoneDirectory();
directory.addNewUser("89003337788", "Вася");
directory.addNewUser("89005556699", "Петя");
directory.addNewUser("89004445566", "Маша");

// Поиск по имени
String phone = directory.getPhone("Маша"); // 89004445566

// Поиск по префиксу
String[] names = directory.namesArrayStartingWith("Ва"); // ["Вася"]

ЗАДАНИЕ 3. НАСЛЕДОВАНИЕ 
3.4. АВТОМАТ
ОПИСАНИЕ КЛАССА AutomaticGun:
Специализированный тип оружия с повышенной скорострельностью, наследуется от Gun.

ПОЛЯ КЛАССА:
private final int fireRate - скорострельность (выстрелов в секунду)

КОНСТРУКТОРЫ:
AutomaticGun()
Описание: Автомат по умолчанию (30 патронов, скорострельность 30)
Параметры: нет

AutomaticGun(int maxOfCartridges)
Описание: Автомат с указанной вместимостью (скорострельность = половина вместимости)
Параметры: maxOfCartridges - максимальная вместимость

AutomaticGun(int maxOfCartridges, int fireRate)
Описание: Автомат с указанными параметрами
Параметры: maxOfCartridges - вместимость, fireRate - скорострельность

МЕТОДЫ ДОСТУПА:
int getFireRate()
Описание: Возвращает скорострельность
Параметры: нет

МЕТОДЫ ЛОГИКИ:

void fire()
Описание: Производит залп из fireRate выстрелов
Параметры: нет

void fireSecond(int N)
Описание: Стреляет в течение N секунд
Параметры: N - время стрельбы в секундах

ТЕСТИРОВАНИЕ:
// Демонстрация работы автомата
AutomaticGun gun1 = new AutomaticGun(); // по умолчанию
AutomaticGun gun2 = new AutomaticGun(20); // с вместимостью
AutomaticGun gun3 = new AutomaticGun(10, 3); // с параметрами

gun3.reload(8);
gun3.fire(); // 3 выстрела
gun3.fireSecond(2); // 6 выстрелов за 2 секунды

ЗАДАНИЕ 4. СОЗДАНИЕ ИЕРАРХИЙ 
4.1. ОРУЖИЕ
ОПИСАНИЕ КЛАССА Weapon:
Абстрактный базовый класс для всех типов оружия с общей логикой работы с патронами.

ПОЛЯ КЛАССА:
protected int ammo - количество патронов (protected для наследников)

КОНСТРУКТОРЫ:
Weapon(int ammo)
Описание: Создает оружие с указанным количеством патронов
Параметры: ammo - начальное количество патронов
Исключения: RuntimeException при отрицательном количестве

АБСТРАКТНЫЕ МЕТОДЫ:

abstract void shoot()
Описание: Абстрактный метод стрельбы
Параметры: нет

МЕТОДЫ ДОСТУПА:
int ammo()
Описание: Возвращает количество патронов
Параметры: нет

boolean getAmmo()
Описание: Использует один патрон
Параметры: нет
Возвращает: true если патрон был использован

int load(int ammo)
Описание: Устанавливает новое количество патронов
Параметры: ammo - новое количество
Возвращает: предыдущее количество

РЕАЛИЗАЦИЯ В НАСЛЕДНИКАХ:
Класс Gun реализует метод shoot() для пистолета
Класс AutomaticGun переопределяет метод fire() для автоматической стрельбы

ТЕСТИРОВАНИЕ:
Weapon gun = new Gun(5);
gun.shoot(); // Бах!
System.out.println(gun.ammo()); // 4

ЗАДАНИЕ 5. ПОЛИМОРФИЗМ 
5.8. ЛУЧШИЙ СТРЕЛОК
ОПИСАНИЕ КЛАССА Shooter:
Сущность стрелка, способного использовать различное оружие через полиморфизм.

ПОЛЯ КЛАССА:
private String name - имя стрелка
private Weapon weapon - оружие стрелка

КОНСТРУКТОРЫ:
Shooter(String name)
Описание: Создает стрелка без оружия
Параметры: name - имя стрелка

Shooter(String name, Weapon weapon)
Описание: Создает стрелка с оружие
Параметры: name - имя, weapon - оружие

МЕТОДЫ ДОСТУПА:
String getName(), Weapon getWeapon()
Описание: Геттеры для полей

void setName(String name), void setWeapon(Weapon weapon)
Описание: Сеттеры для полей

МЕТОДЫ ЛОГИКИ:

void shoot()
Описание: Стрелок производит выстрел из своего оружия
Параметры: нет

МЕТОД ПРЕДСТАВЛЕНИЯ:
String toString()
Описание: Возвращает информацию о стрелке
Параметры: нет

ТЕСТИРОВАНИЕ:
// Демонстрация полиморфизма
Shooter shooter1 = new Shooter("Васька"); // без оружия
Shooter shooter2 = new Shooter("Гришка", new Gun()); // с пистолетом
Shooter shooter3 = new Shooter("Антошка", new AutomaticGun()); // с автоматом

shooter1.shoot(); // не могу участвовать в перестрелке
shooter2.shoot(); // Бах!
shooter3.shoot(); // 30 выстрелов (залп)

ЗАДАНИЕ 6. ПОЛИМОРФНОЕ СРАВНЕНИЕ 
6.2. СРАВНЕНИЕ ТОЧЕК
ОПИСАНИЕ КЛАССА Point:
Класс точки с переопределенным методом equals для сравнения по координатам.

ПОЛЯ КЛАССА:
private double x - координата X
private double y - координата Y

КОНСТРУКТОРЫ:
Point()
Описание: Создает точку в начале координат (0,0)
Параметры: нет

Point(double x, double y)
Описание: Создает точку с указанными координатами
Параметры: x - координата X, y - координата Y

МЕТОДЫ ДОСТУПА:
double getX(), double getY()
Описание: Геттеры для координат

void setX(double x), void setY(double y)
Описание: Сеттеры для координат

МЕТОД СРАВНЕНИЯ:
boolean equals(Object obj)
Описание: Сравнивает точки по координатам
Параметры: obj - объект для сравнения
Возвращает: true если координаты одинаковые

МЕТОД ПРЕДСТАВЛЕНИЯ:
String toString()
Описание: Возвращает строковое представление точки
Параметры: нет

ТЕСТИРОВАНИЕ:
Point point1 = new Point(2.6, 4.1);
Point point2 = new Point(2.6, 4.1);
Point point3 = new Point(1.0, 4.0);

System.out.println(point1.equals(point2)); // true
System.out.println(point1.equals(point3)); // false
System.out.println(point1 == point2); // false (разные объекты)

ЗАДАНИЕ 7. ПАКЕТЫ
7.1. НАВЕСТИ ПОРЯДОК
РЕАЛИЗОВАННАЯ СТРУКТУРА ПАКЕТОВ:

ru.safoev.person:
Name - работа с именами
Person - представление человека

ru.safoev.organization:
Department - отдел организации
Employee - сотрудник организации

ru.safoev.weapon:
Weapon - абстрактный класс оружия
Gun - пистолет
AutomaticGun - автомат
Shooter - стрелок

ru.safoev.geometry:
Point - геометрическая точка

ru.safoev.contacts:
TelephoneDirectory - телефонный справочник

ru.safoev.application:
MenuAndValidator - меню и валидация

ru.safoev.main:
Main - точка входа
PolymorphismDemo - для демонстрации полиморфизма

7.2. ГЛАВНЫЙ МЕТОД
ОПИСАНИЕ КЛАССА Main:
Точка входа в программу, расположенная в пакете ru.safoev.main

МЕТОДЫ:
public static void main(String[] args)
Описание: Главный метод программы
Параметры: args - аргументы командной строки

7.3. ВОЗВЕДЕНИЕ В СТЕПЕНЬ
РЕАЛИЗОВАННЫЙ МЕТОД:
double power(String xStr, String yStr)
Описание: Возводит число X в степень Y
Параметры: xStr - строка с числом X, yStr - строка с числом Y
Возвращает: результат возведения в степень
Использует: Integer.parseInt и Math.pow

ТЕСТИРОВАНИЕ:
double result = power("2", "3"); // 8.0
double result2 = power("5", "2"); // 25.0

ЗАДАНИЕ 8. ПАКЕТНАЯ ИНКАПСУЛЯЦИЯ 
8.2. ПАТРОНЫ НАСЛЕДНИКАМ
ИЗМЕНЕНИЯ В КЛАССЕ Weapon:
МОДИФИКАТОР ДОСТУПА:

Поле ammo изменено с private на protected

ПРЕИМУЩЕСТВА:
Наследники получают прямой доступ к полю ammo
Упрощение кода в классах Gun и AutomaticGun
Упрощение метода unLoad() в классе Gun

УПРОЩЕНИЕ МЕТОДА unLoad():
// Было:
public int unLoad() {
    int res = ammo();
    load(0);
    return res;
}
// Стало:
public int unLoad() {
    int res = ammo;
    ammo = 0;
    return res;
}

СИСТЕМА МЕНЮ И ТЕСТИРОВАНИЯ
КЛАСС MenuAndValidator:
Обеспечивает удобное тестирование всех реализованных классов через консольное меню.

ВОЗМОЖНОСТИ:
Ручной ввод данных пользователем
Автоматический ввод с готовыми тестовыми данными
Валидация всех вводимых данных
Пошаговое тестирование каждой задачи

РЕЖИМЫ РАБОТЫ:
Ручной ввод - пользователь вводит данные самостоятельно
Автоматический ввод - используются готовые тестовые данные

ЗАКЛЮЧЕНИЕ
Все 8 задач варианта 4 успешно реализованы и протестированы:

Задание 1.5 - Перезарядка пистолета с контролем патронов
Задание 1.7 - Неизменяемые имена с валидацией
Задание 2.3 - Телефонный справочник с полным функционалом
Задание 3.4 - Автомат с скорострельностью
Задание 4.1 - Иерархия оружия с абстрактным классом
Задание 5.8 - Стрелок с полиморфным использованием оружия
Задание 6.2 - Сравнение точек по координатам
Задание 7.1-7.3 - Организация пакетов и главный метод
Задание 8.2 - Protected доступ к патронам для наследников
