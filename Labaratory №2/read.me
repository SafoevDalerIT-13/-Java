ОТЧЕТ ПО ЛАБОРАТОРНОЙ РАБОТЕ №2 ПО JAVA

ОБЩЕЕ ОПИСАНИЕ РАБОТЫ
Программа представляет собой консольное приложение с меню для выполнения 6 задач по объектно-ориентированному программированию. Приложение поддерживает два режима ввода данных: ручной ввод пользователем и автоматический ввод с готовыми данными.

СТРУКТУРА ЛАБОРАТОРНОЙ РАБОТЫ
1)  MenuAndValidator  - основной класс с логикой меню и валидации ввода
2)  Name  - класс для работы с именами  
3)  Person  - класс для представления человека
4)  Employee  - класс для представления сотрудника
5)  Department  - класс для представления отдела
6) Gun  - класс для моделирования пистолета
7) Main - точка входа в программу

  ТЕСТИРОВАНИЕ ЗАДАЧ

 # 1. КАТЕГОРИЯ №1: Задача 3 - Класс Name

 ОПИСАНИЕ КЛАССА:  
Класс Name представляет сущность "Имя" с поддержкой различных комбинаций параметров (имя, фамилия, отчество). Класс обеспечивает хранение и обработку персональных данных человека.

 ПОЛЯ КЛАССА: 
-  private String name  - хранит имя человека
-  private String lastName  - хранит фамилию человека  
-  private String surname  - хранит отчество человека

 КОНСТРУКТОРЫ: 

  Name()   
-  Описание:  Конструктор по умолчанию. Создает пустой объект Name.
-  Параметры:  нет


  Name(String name)  
-  Описание:  Конструктор с одним параметром. Создает объект Name только с именем.
-  Параметры:  name - имя человека

  Name(String firstName, String lastName)  
-  Описание:  Конструктор с двумя параметрами. Создает объект Name с именем и фамилией.
-  Параметры:  firstName - имя человека, lastName - фамилия человека


  Name(String firstName, String lastName, String surname)  
-  Описание:  Конструктор с тремя параметрами. Создает объект Name с именем, фамилией и отчеством.
-  Параметры:  firstName - имя человека, lastName - фамилия человека, surname - отчество человека

 МЕТОДЫ ДОСТУПА (ГЕТТЕРЫ): 

  String getName()  
-  Описание:  Возвращает имя человека.
-  Параметры:  нет


  String getLastName()  
-  Описание:  Возвращает фамилию человека.
-  Параметры:  нет  

  String getSurname()  
-  Описание:  Возвращает отчество человека.
-  Параметры:  нет

 МЕТОДЫ ИЗМЕНЕНИЯ (СЕТТЕРЫ): 

  void setName(String name)  
-  Описание:  Устанавливает имя человека.
-  Параметры:  name - новое имя

  void setLastName(String lastName)  
-  Описание:  Устанавливает фамилию человека.
-  Параметры:  lastName - новая фамилия


  void setSurname(String surname)  
-  Описание:  Устанавливает отчество человека.
-  Параметры:  surname - новое отчество

 МЕТОДЫ ПРЕДСТАВЛЕНИЯ: 

  String toString()  
-  Описание:  Возвращает строковое представление объекта в формате "Фамилия Имя Отчество". Если какие-то компоненты отсутствуют, они пропускаются.
-  Параметры:  нет

  String toString1()  
-  Описание:  Возвращает альтернативное строковое представление объекта в формате "Имя Отчество Фамилия". Если какие-то компоненты отсутствуют, они пропускаются.
-  Параметры:  нет

 ТЕСТИРОВАНИЕ (автоматический ввод): 
- Клеопатра: "Клеопатра"
- Пушкин Александр Сергеевич: "Пушкин Александр Сергеевич" 
- Маяковский Владимир: "Маяковский Владимир"

 ТЕСТИРОВАНИЕ (ручной ввод): 
Входные параметры: только имя "Мария"
Результат: "Мария"

Входные параметры: фамилия "Иванов", имя "Иван", отчество "Иванович"
Результат: "Иванов Иван Иванович"

---

 # 2. КАТЕГОРИЯ №1: Задача 2 - Класс Person

 ОПИСАНИЕ КЛАССА: 
Класс Person представляет сущность "Человек" с именем и ростом. Обеспечивает хранение и валидацию данных о человеке.

 ПОЛЯ КЛАССА: 
-  private String name  - хранит имя человека
-  private int height  - хранит рост человека в сантиметрах

 КОНСТРУКТОРЫ: 

  Person()  
-  Описание:  Конструктор по умолчанию. Создает пустой объект Person.
-  Параметры:  нет

  Person(String name, int height)  
-  Описание:  Конструктор с параметрами. Создает объект Person с указанным именем и ростом.
-  Параметры:  name - имя человека, height - рост человека в см

 МЕТОДЫ ДОСТУПА (ГЕТТЕРЫ): 

  String getName()  
-  Описание:  Возвращает имя человека.
-  Параметры:  нет

  int getHeight()  
-  Описание:  Возвращает рост человека.
-  Параметры:  нет

 МЕТОДЫ ИЗМЕНЕНИЯ (СЕТТЕРЫ): 

  void setName(String name)  
-  Описание:  Устанавливает имя человека.
-  Параметры:  name - новое имя

  void setHeight(int height)  
-  Описание:  Устанавливает рост человека. Включает проверку корректности значения (рост должен быть положительным).
-  Параметры:  height - новый рост в см

 МЕТОД ПРЕДСТАВЛЕНИЯ: 

  String toString()  
-  Описание:  Возвращает строковое представление объекта в формате "Имя, рост: X".
-  Параметры:  нет

 ТЕСТИРОВАНИЕ (автоматический ввод): 
- Клеопатра, рост 152: "Клеопатра, рост: 152"
- Пушкин, рост 167: "Пушкин, рост: 167"
- Владимир, рост 189: "Владимир, рост: 189"

 ТЕСТИРОВАНИЕ (ручной ввод): 
Входные параметры: имя "Анна", рост 165
Результат: "Анна, рост: 165"

---

 # 3. КАТЕГОРИЯ №2: Задача 4 - Сотрудники и отделы

 ОПИСАНИЕ КЛАССА Department: 
Класс Department представляет сущность "Отдел" в организации. Содержит информацию о названии отдела, сотрудниках и руководителе.

 ПОЛЯ КЛАССА: 
-  private String name  - хранит название отдела
-  private Employee manager  - хранит ссылку на руководителя отдела
-  private List<Employee> employees  - хранит список сотрудников отдела

 КОНСТРУКТОРЫ: 

  Department(String name)  
-  Описание:  Конструктор с названием отдела. Инициализирует список сотрудников.
-  Параметры:  name - название отдела

 МЕТОДЫ ДОСТУПА (ГЕТТЕРЫ): 

  String getName()  
-  Описание:  Возвращает название отдела.
-  Параметры:  нет

  Employee getManager()  
-  Описание:  Возвращает руководителя отдела.
-  Параметры:  нет

  List<Employee> getEmployees()  
-  Описание:  Возвращает список всех сотрудников отдела.
-  Параметры:  нет

 МЕТОДЫ ИЗМЕНЕНИЯ (СЕТТЕРЫ): 

  void setManager(Employee manager)  
-  Описание:  Устанавливает руководителя отдела.
-  Параметры:  manager - сотрудник-руководитель

  void addEmployee(Employee employee)  
-  Описание:  Добавляет сотрудника в отдел.
-  Параметры:  employee - добавляемый сотрудник

---

 ОПИСАНИЕ КЛАССА Employee: 
Класс Employee представляет сущность "Сотрудник" организации. Содержит информацию о сотруднике и его связи с отделом.

 ПОЛЯ КЛАССА: 
-  private String name  - хранит имя сотрудника
-  private Department department  - хранит ссылку на отдел сотрудника

 КОНСТРУКТОРЫ: 

  Employee(String name, Department department)  
-  Описание:  Конструктор с параметрами. Создает сотрудника и автоматически добавляет его в отдел.
-  Параметры:  name - имя сотрудника, department - отдел сотрудника

 МЕТОДЫ ДОСТУПА (ГЕТТЕРЫ): 

  String getName()  
-  Описание:  Возвращает имя сотрудника.
-  Параметры:  нет

  Department getDepartment()  
-  Описание:  Возвращает отдел сотрудника.
-  Параметры:  нет

 МЕТОДЫ БИЗНЕС-ЛОГИКИ: 

  void setManager(Employee manager)  
-  Описание:  Назначает руководителя для отдела сотрудника.
-  Параметры:  manager - сотрудник-руководитель

  List<Employee> getAllDepartmentEmployees()  
-  Описание:  Возвращает всех сотрудников отдела через ссылку на любого сотрудника этого отдела.
-  Параметры:  нет

 МЕТОД ПРЕДСТАВЛЕНИЯ: 

  String toString()  
-  Описание:  Возвращает строковое представление сотрудника с информацией об отделе и руководителе.
-  Параметры:  нет

 ТЕСТИРОВАНИЕ (автоматический ввод): 
Созданы сотрудники: Петров, Козлов, Сидоров в отделе IT
Назначен начальник: Козлов
Результат:
- Петров: "Петров работает в отделе IT, начальник которого Козлов"
- Козлов: "Козлов работает в отделе IT, начальник которого Козлов"
- Сидоров: "Сидоров работает в отделе IT, начальник которого Козлов"

 ТЕСТИРОВАНИЕ (ручной ввод): 
Создан отдел: "Финансы"
Созданы сотрудники: "Смирнов", "Петрова", "Васильев"
Назначен начальник: "Смирнов"
Результат корректно отображает информацию о сотрудниках и их начальнике

---

 # 4. КАТЕГОРИЯ №3: Задача 4 - Список сотрудников отдела

 МЕТОДЫ ДЛЯ РАБОТЫ СО СПИСКОМ СОТРУДНИКОВ: 

 В КЛАССЕ Employee: 

  List<Employee> getAllDepartmentEmployees()  
-  Описание:  Возвращает список всех сотрудников отдела через ссылку на любого сотрудника этого отдела. Использует делегирование к методу отдела.
-  Параметры:  нет

 В КЛАССЕ Department: 

  List<Employee> getEmployees()  
-  Описание:  Возвращает список всех сотрудников отдела.
-  Параметры:  нет

  void addEmployee(Employee employee)  
-  Описание:  Добавляет сотрудника в список отдела.
-  Параметры:  employee - добавляемый сотрудник

 ТЕСТИРОВАНИЕ (автоматический ввод): 
Через Петрова: список сотрудников IT отдела (Петров, Козлов, Сидоров)
Через Козлова: тот же список сотрудников
Через Сидорова: тот же список сотрудников

 ТЕСТИРОВАНИЕ (ручной ввод): 
Отдел "Разработка", сотрудники: "Алексей", "Мария", "Дмитрий"
Получение списка через любого сотрудника возвращает полный список всех трех сотрудников

---

 # 5. КАТЕГОРИЯ №4: Задача 5 - Альтернативное представление имен

 МЕТОД ПРЕДСТАВЛЕНИЯ: 

 В КЛАССЕ Name: 

  String toString1()  
-  Описание:  Возвращает альтернативное строковое представление объекта Name в формате "Имя Отчество Фамилия". Если какие-то компоненты отсутствуют, они пропускаются.
-  Параметры:  нет

 ТЕСТИРОВАНИЕ (автоматический ввод): 
- Клеопатра: "Клеопатра"
- Александр Сергеевич Пушкин: "Александр Сергеевич Пушкин"
- Владимир Маяковский: "Владимир Маяковский"
- Христофор Бонифатьевич: "Христофор Бонифатьевич"

 ТЕСТИРОВАНИЕ (ручной ввод): 
Входные параметры: имя "Сергей", фамилия "Петров"
Результат: "Сергей Петров"

---

 # 6. КАТЕГОРИЯ №5: Задача 1 - Класс Gun

 ОПИСАНИЕ КЛАССА: 
Класс Gun представляет сущность "Пистолет" с возможностью стрельбы и управления количеством патронов. Обеспечивает контроль за состоянием оружия.

 ПОЛЯ КЛАССА: 
-  private int numberOfCartridges  - хранит количество патронов в пистолете

 КОНСТРУКТОРЫ: 

  Gun()  
-  Описание:  Конструктор по умолчанию. Создает пистолет с 5 патронами.
-  Параметры:  нет

  Gun(int numberOfCartridges)  
-  Описание:  Конструктор с параметром. Создает пистолет с указанным количеством патронов.
-  Параметры:  numberOfCartridges - начальное количество патронов

 МЕТОДЫ ДОСТУПА (ГЕТТЕРЫ): 

  int getNumberOfCartridges()  
-  Описание:  Возвращает текущее количество патронов в пистолете.
-  Параметры:  нет

 МЕТОДЫ ИЗМЕНЕНИЯ (СЕТТЕРЫ): 

  void setNumberOfCartridges(int numberOfCartridges)  
-  Описание:  Устанавливает количество патронов в пистолете. Включает проверку корректности значения (количество не может быть отрицательным).
-  Параметры:  numberOfCartridges - новое количество патронов

 МЕТОДЫ БИЗНЕС-ЛОГИКИ: 

  void fire()  
-  Описание:  Производит выстрел из пистолета. Если есть патроны - уменьшает их количество на 1 и выводит "Бах!", если нет патронов - выводит "Клац!".
-  Параметры:  нет

 МЕТОД ПРЕДСТАВЛЕНИЯ: 

  String toString()  
-  Описание:  Возвращает строковое представление объекта с информацией о количестве патронов.
-  Параметры:  нет

 ТЕСТИРОВАНИЕ (автоматический ввод): 
Создан пистолет с 3 патронами
Выстрелы: "Бах!", "Бах!", "Бах!", "Клац!", "Клац!"

 ТЕСТИРОВАНИЕ (ручной ввод): 
Создан пистолет с 2 патронами
Действия: выстрел ("Бах!"), проверка патронов (осталось 1), выстрел ("Бах!"), выстрел ("Клац!"), перезарядка на 3 патрона

---

  ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ВАЛИДАЦИИ
-  inputName()  - ввод и валидация имени
-  inputLastname()  - ввод и валидация фамилии  
-  inputSurname()  - ввод и валидация отчества
-  inputHeight()  - ввод и валидация роста
-  inputDepartment()  - ввод и валидация названия отдела

  ОСОБЕННОСТИ РЕАЛИЗАЦИИ
1. Все классы инкапсулируют данные с использованием private полей и public get/set методов
2. Реализована двусторонняя связь между Employee и Department
3. Класс Department автоматически добавляет сотрудников в список при создании
4. Реализована обработка некорректного ввода во всех методах валидации
5. Поддержка двух режимов работы: автоматического и ручного ввода

  ЗАКЛЮЧЕНИЕ
Все 6 задач успешно реализованы и протестированы. Реализована удобная система меню с защитой от некорректного ввода. Каждый класс решает конкретную задачу из лабораторной работы №2. Все методы (конструкторы, геттеры, сеттеры, toString) документированы и протестированы.
